<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.scijava</groupId>
		<artifactId>pom-scijava</artifactId>
		<version>40.0.0</version>
	</parent>

	<groupId>org.janelia.saalfeldlab</groupId>
	<artifactId>paintera</artifactId>
	<version>1.10.6-SNAPSHOT</version>

	<name>Paintera</name>
	<description>New Era Painting and annotation tool</description>
	<url>https://github.com/saalfeldlab/paintera</url>
	<inceptionYear>2018</inceptionYear>
	<organization>
		<name>HHMI Janelia</name>
		<url>https://janelia.org</url>
	</organization>
	<licenses>
		<license>
			<name>GNU General Public License v2.0</name>
		</license>
	</licenses>

	<properties>
		<!-- allows passing in command line argument to javafx:run via `-Dpaintera.commandline.args="....."`-->
		<paintera.commandline.args />

		<main-class>org.janelia.saalfeldlab.paintera.Paintera</main-class>
		<license.licenseName>GNU General Public License v2.0</license.licenseName>
		<license.copyrightOwners>Philipp Hanslovsky, Stephan Saalfeld</license.copyrightOwners>

		<!-- NB: Deploy releases to the SciJava Maven repository. -->
		<releaseProfiles>sign,deploy-to-scijava</releaseProfiles>


		<package-name>org.janelia.saalfeldlab.paintera</package-name>

		<!-- java -->
		<scijava.jvm.version>21</scijava.jvm.version>
		<!-- kotlin -->
		<kotlin.version>1.9.24</kotlin.version>
		<kotlin.compiler.incremental>true</kotlin.compiler.incremental>

		<!-- NB: Convert README.md to html during compilation. -->
		<markdown-page-generator-plugin.version>2.1.0</markdown-page-generator-plugin.version>

		<javadoc.skip>true</javadoc.skip>
		<maven.javadoc.skip>${javadoc.skip}</maven.javadoc.skip>

		<janino.version>3.0.7</janino.version>
		<logback.version>1.4.12</logback.version>
		<slf4j.version>2.0.0</slf4j.version>

		<!-- JavaFx Version-->
		<javafx.version>22.0.1</javafx.version>
		<saalfx.version>2.2.0</saalfx.version>

		<alphanumeric-comparator.version>1.4.1</alphanumeric-comparator.version>
		<dokka.version>1.4.30</dokka.version>


		<main-class>org.janelia.saalfeldlab.paintera.Paintera</main-class>
		<app.name>Paintera</app.name>
		<app.package>paintera</app.package>
		<app.version>1.10.6</app.version>

		<jvm.modules>javafx.base,javafx.controls,javafx.fxml,javafx.media,javafx.swing,javafx.web,javafx.graphics,java.naming,java.management,java.sql</jvm.modules>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<windows.upgrade.uuid>f918b6f9-8685-4b50-9fbd-9be7a1209249</windows.upgrade.uuid>
		<macos.sign />
		<macos.sign.identity />

		<!-- N5 (Only specify if newer versions available than in pom-scijava) -->
		<n5-universe.version>2.3.0</n5-universe.version>
		<n5-google-cloud.version>5.1.0</n5-google-cloud.version>
		<n5-aws-s3.version>4.3.0</n5-aws-s3.version>
		<n5-zarr.version>1.5.1</n5-zarr.version>
		<n5-hdf5.version>2.2.1</n5-hdf5.version>
		<n5.version>3.5.1</n5.version>

		<maven-compiler-plugin.version>3.13.0</maven-compiler-plugin.version>
		<enforcer.skip>true</enforcer.skip>
	</properties>


	<dependencies>
		<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
			<version>2.2.2</version>
		</dependency>
		<dependency>
			<groupId>dev.dirs</groupId>
			<artifactId>directories</artifactId>
			<version>26</version>
		</dependency>
		<dependency>
			<groupId>com.microsoft.onnxruntime</groupId>
			<artifactId>onnxruntime</artifactId>
			<version>1.14.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpmime</artifactId>
		</dependency>

		<dependency>
			<groupId>org.janelia.saalfeldlab</groupId>
			<artifactId>n5-universe</artifactId>
			<version>${n5-universe.version}</version>
			<exclusions>
				<exclusion>
					<groupId>junit</groupId>
					<artifactId>junit</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-base</artifactId>
			<version>${javafx.version}</version>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-controls</artifactId>
			<version>${javafx.version}</version>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-graphics</artifactId>
			<version>${javafx.version}</version>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-swing</artifactId>
			<version>${javafx.version}</version>
		</dependency>

		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-media</artifactId>
			<version>${javafx.version}</version>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-fxml</artifactId>
			<version>${javafx.version}</version>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-web</artifactId>
			<version>${javafx.version}</version>
		</dependency>


		<dependency>
			<groupId>org.jetbrains.kotlin</groupId>
			<artifactId>kotlin-stdlib</artifactId>
		</dependency>
		<dependency>
			<groupId>org.janelia.saalfeldlab</groupId>
			<artifactId>n5-aws-s3</artifactId>
		</dependency>
		<dependency>
			<groupId>io.github.oshai</groupId>
			<artifactId>kotlin-logging-jvm</artifactId>
			<version>5.1.0</version>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scijava-common</artifactId>
		</dependency>
		<dependency>
			<groupId>sc.fiji</groupId>
			<artifactId>bigdataviewer-core</artifactId>
		</dependency>
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
		</dependency>
		<dependency>
			<groupId>net.sf.trove4j</groupId>
			<artifactId>trove4j</artifactId>
		</dependency>
		<dependency>
			<groupId>net.imglib2</groupId>
			<artifactId>imglib2</artifactId>
		</dependency>
		<dependency>
			<groupId>net.imglib2</groupId>
			<artifactId>imglib2-algorithm</artifactId>
		</dependency>
		<dependency>
			<groupId>net.imglib2</groupId>
			<artifactId>imglib2-realtransform</artifactId>
		</dependency>
		<dependency>
			<groupId>net.imglib2</groupId>
			<artifactId>imglib2-label-multisets</artifactId>
		</dependency>
		<dependency>
			<groupId>sc.fiji</groupId>
			<artifactId>bigdataviewer-vistools</artifactId>
		</dependency>
		<dependency>
			<groupId>se.sawano.java</groupId>
			<artifactId>alphanumeric-comparator</artifactId>
			<version>${alphanumeric-comparator.version}</version>
		</dependency>

		<!--		logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-jdk-platform-logging</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
		</dependency>
		<!--		janino & commons-compiler is needed for conditionals inside logback xml -->
		<dependency>
			<groupId>org.codehaus.janino</groupId>
			<artifactId>janino</artifactId>
			<version>${janino.version}</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.janino</groupId>
			<artifactId>commons-compiler</artifactId>
			<version>${janino.version}</version>
		</dependency>

		<dependency>
			<groupId>net.imglib2</groupId>
			<artifactId>imglib2-cache</artifactId>
		</dependency>
		<dependency>
			<groupId>org.janelia.saalfeldlab</groupId>
			<artifactId>label-utilities</artifactId>
			<version>0.5.1</version>
		</dependency>
		<dependency>
			<groupId>org.janelia.saalfeldlab</groupId>
			<artifactId>label-utilities-n5</artifactId>
			<version>0.3.2</version>
		</dependency>
		<dependency>
			<groupId>org.controlsfx</groupId>
			<artifactId>controlsfx</artifactId>
			<version>11.1.0</version>
			<exclusions>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-base</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-graphics</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-controls</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-media</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-web</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.fxyz3d</groupId>
			<artifactId>fxyz3d</artifactId>
			<version>0.5.2</version>
			<!--		need to exclude slf4j-simple because of fxyz3d dependency -->
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-simple</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>info.picocli</groupId>
			<artifactId>picocli</artifactId>
		</dependency>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
		</dependency>
		<dependency>
			<groupId>com.pivovarit</groupId>
			<artifactId>throwing-function</artifactId>
			<version>1.5.0</version>
		</dependency>
		<dependency>
			<groupId>org.snakeyaml</groupId>
			<artifactId>snakeyaml-engine</artifactId>
		</dependency>
		<dependency>
			<groupId>me.xdrop</groupId>
			<artifactId>fuzzywuzzy</artifactId>
			<version>1.2.0</version>
		</dependency>

		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
		</dependency>

		<!--		scripting-->
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scijava-repl-fx</artifactId>
			<version>0.2.0</version>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scripting-beanshell</artifactId>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scripting-groovy</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.apache.groovy</groupId>
					<artifactId>groovy</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.groovy</groupId>
			<artifactId>groovy</artifactId>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scripting-java</artifactId>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scripting-jython</artifactId>
			<exclusions>
				<exclusion>
					<groupId>com.github.jnr</groupId>
					<artifactId>jnr-ffi</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.github.jnr</groupId>
					<artifactId>jffi</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>com.github.jnr</groupId>
			<artifactId>jnr-ffi</artifactId>
			<version>2.2.10</version>
		</dependency>

		<!--		markdown rendering-->
		<dependency>
			<groupId>com.atlassian.commonmark</groupId>
			<artifactId>commonmark</artifactId>
			<version>0.13.0</version>
		</dependency>
		<dependency>
			<groupId>com.atlassian.commonmark</groupId>
			<artifactId>commonmark-ext-gfm-tables</artifactId>
			<version>0.13.0</version>
		</dependency>

		<dependency>
			<groupId>org.janelia.saalfeldlab</groupId>
			<artifactId>saalfx</artifactId>
			<version>${saalfx.version}</version>
		</dependency>

		<!--		Units and conversion-->
		<!-- https://mvnrepository.com/artifact/tech.units/indriya -->
		<dependency>
			<groupId>tech.units</groupId>
			<artifactId>indriya</artifactId>
			<version>2.0</version>
		</dependency>

		<!--		Load meshes-->
		<!--		https://github.com/javagl/Obj -->
		<dependency>
			<groupId>de.javagl</groupId>
			<artifactId>obj</artifactId>
			<version>0.3.0</version>
		</dependency>
		<!--		jsoup for html parsing inside CATMAID json mesh format-->
		<dependency>
			<groupId>org.jsoup</groupId>
			<artifactId>jsoup</artifactId>
			<version>1.15.3</version>
		</dependency>


		<!--	fontawesome-->
		<dependency>
			<groupId>de.jensd</groupId>
			<artifactId>fontawesomefx-commons</artifactId>
			<version>9.1.2</version>
			<exclusions>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-base</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-controls</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-graphics</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-fxml</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>de.jensd</groupId>
			<artifactId>fontawesomefx-controls</artifactId>
			<version>9.1.2</version>
			<exclusions>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-base</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-controls</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-graphics</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-fxml</artifactId>
				</exclusion>
				<exclusion>
					<groupId>de.jensd</groupId>
					<artifactId>fontawesomefx-commons</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>de.jensd</groupId>
			<artifactId>fontawesomefx-fontawesome</artifactId>
			<version>4.7.0-9.1.2</version>
			<exclusions>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-base</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-controls</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-graphics</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>javafx-fxml</artifactId>
				</exclusion>
				<exclusion>
					<groupId>de.jensd</groupId>
					<artifactId>fontawesomefx-commons</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!--		Tests-->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<version>${junit-jupiter.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>${junit-jupiter.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-params</artifactId>
			<version>${junit-jupiter.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jetbrains.kotlin</groupId>
			<artifactId>kotlin-test-junit5</artifactId>
			<version>${kotlin.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.controlsfx</groupId>
			<artifactId>fxsampler</artifactId>
			<version>1.0.11</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.fxmisc.richtext</groupId>
			<artifactId>richtextfx</artifactId>
			<version>0.10.6</version>
		</dependency>
		<dependency>
			<groupId>org.jetbrains.kotlinx</groupId>
			<artifactId>kotlinx-coroutines-core</artifactId>
			<version>1.7.3</version>
			<scope>compile</scope>
		</dependency>
	</dependencies>

	<developers>
		<developer>
			<id>hanslovsky</id>
			<name>Philipp Hanslovsky</name>
			<email>hanslovskyp@janelia.hhmi.org</email>
			<url />
			<organization>HHMI Janelia</organization>
			<organizationUrl>https://janelia.org/</organizationUrl>
			<roles>
				<role>founder</role>
				<role>lead</role>
				<role>developer</role>
				<role>maintainer</role>
			</roles>
			<timezone>-5</timezone>
		</developer>
		<developer>
			<id>axtimwalde</id>
			<name>Stephan Saalfeld</name>
			<email>saalfelds@janelia.hhmi.org</email>
			<url />
			<organization>HHMI Janelia</organization>
			<organizationUrl>http://janelia.org/</organizationUrl>
			<roles>
				<role>lead</role>
				<role>developer</role>
				<role>maintainer</role>
			</roles>
			<timezone>-5</timezone>
		</developer>
		<developer>
			<id>cmhulbert</id>
			<name>Caleb Hulbert</name>
			<email>hulbertc@hhmi.org</email>
			<url />
			<organization>HHMI Janelia</organization>
			<organizationUrl>http://janelia.org/</organizationUrl>
			<roles>
				<role>developer</role>
				<role>maintainer</role>
			</roles>
			<timezone>-5</timezone>
		</developer>
		<developer>
			<id>igorpisarev</id>
			<name>Igor Pisarev</name>
			<email>pisarevi@janelia.hhmi.org</email>
			<url />
			<organization>HHMI Janelia</organization>
			<organizationUrl>http://janelia.org/</organizationUrl>
			<roles>
				<role>developer</role>
				<role>maintainer</role>
			</roles>
			<timezone>-5</timezone>
		</developer>
	</developers>

	<contributors>
		<contributor>
			<name>Vanessa Leite</name>
			<properties>
				<id>ssinhaleite</id>
			</properties>
			<url>https://github.com/ssinhaleite</url>
		</contributor>
	</contributors>

	<mailingLists>
		<mailingList>
			<name>ImageJ Forum</name>
			<archive>https://forum.image.sc/</archive>
		</mailingList>
	</mailingLists>

	<issueManagement>
		<system>GitHub</system>
		<url>https://github.com/saalfeldlab/paintera/issues</url>
	</issueManagement>


	<ciManagement>
		<system>GitHub Actions</system>
		<url>https://github.com/saalfeldlab/paintera/actions</url>
	</ciManagement>

	<scm>
		<connection>scm:git:https://github.com/saalfeldlab/paintera</connection>
		<developerConnection>scm:git:git@github.com:saalfeldlab/paintera.git</developerConnection>
		<tag>HEAD</tag>
		<url>https://github.com/saalfeldlab/paintera</url>
	</scm>

	<repositories>
		<repository>
			<id>scijava.public</id>
			<url>https://maven.scijava.org/content/groups/public</url>
		</repository>
		<repository>
			<id>jzy3d</id>
			<url>https://maven.jzy3d.org/releases</url>
		</repository>
	</repositories>

	<build>
		<extensions>
			<!-- Used to inject the OS and architecture values in a consistent manner -->
			<!-- https://github.com/trustin/os-maven-plugin -->
			<extension>
				<groupId>kr.motd.maven</groupId>
				<artifactId>os-maven-plugin</artifactId>
				<version>1.7.0</version>
			</extension>
		</extensions>
		<resources>
			<resource>
				<!-- Here we are processing the platform-specific jpackage command files, adding in Maven
				properties for configuration. -->
				<directory>${project.basedir}/src/packaging</directory>
				<filtering>true</filtering>
				<targetPath>${project.build.directory}/packaging</targetPath>
			</resource>
			<!-- Add the default resource path back in - by overriding above it disables the default -->
			<resource>
				<directory>${project.basedir}/src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
			<resource>
				<directory>${project.basedir}/src/main/resources/build-info/</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>**PainteraBaseViewTest**</exclude>
						<exclude>**SplashScreenTest**</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<annotationProcessorPath>
							<groupId>org.scijava</groupId>
							<artifactId>scijava-common</artifactId>
							<version>${scijava-common.version}</version>
						</annotationProcessorPath>
					</annotationProcessorPaths>
					<annotationProcessors>
						<annotationProcessor>org.scijava.annotations.AnnotationProcessor</annotationProcessor>
					</annotationProcessors>
					<source>21</source>
					<target>21</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<!-- This copies the jar files declared by the Maven build into a single directory.
						This makes it easy to assemble the final installer package -->
						<id>copy-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<!-- Include only compile stage dependencies (no test dependencies) -->
							<includeScope>compile</includeScope>
							<!-- The JavaFX libraries are bundled into the custom JVM, so we don't want to duplicate
							them in the bundled app and installer. This command skips all of the JavaFX by groupId. -->
							<excludeGroupIds>org.openjfx</excludeGroupIds>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- Put the application jar generated by the project into the dependency folder - the default folder
				for the maven-dependency-plugin output. -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<outputDirectory>${project.build.directory}/dependency</outputDirectory>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.jetbrains.dokka</groupId>
				<artifactId>dokka-maven-plugin</artifactId>
				<configuration>
					<sourceLinks>
						<link>
							<path>${project.basedir}/src/main/kotlin</path>
							<url>https://github.com/saalfeldlab/paintera/tree/master/src/main/kotlin</url>
							<lineSuffix>#L</lineSuffix>
						</link>

						<link>
							<path>${project.basedir}/src/main/java</path>
							<url>https://github.com/saalfeldlab/paintera/tree/master/src/main/java</url>
							<lineSuffix>#L</lineSuffix>
						</link>
					</sourceLinks>
				</configuration>
			</plugin>
			<!--		copy README.md instead of symlink-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>${maven-resources-plugin.version}</version>
				<configuration>
					<nonFilteredFileExtensions>
						<nonFilteredFileExtension>onnx</nonFilteredFileExtension>
					</nonFilteredFileExtensions>
				</configuration>
				<executions>
					<execution>
						<id>copy-readme-md</id>
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>target/classes</outputDirectory>
							<resources>
								<resource>
									<directory>${basedir}</directory>
									<includes>
										<include>README.md</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-img</id>
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>target/classes/img</outputDirectory>
							<resources>
								<resource>
									<directory>img</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!--		NB: generate and copy html directly instead of copying markdown-->
			<plugin>
				<groupId>com.ruleoftech</groupId>
				<artifactId>markdown-page-generator-plugin</artifactId>
				<version>${markdown-page-generator-plugin.version}</version>
				<executions>
					<execution>
						<id>readme-md-to-html</id>
						<phase>validate</phase>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<inputDirectory>markdown</inputDirectory>
					<outputDirectory>${project.build.outputDirectory}</outputDirectory>
					<inputEncoding>UTF-8</inputEncoding>
					<pegdownExtensions>TABLES,FENCED_CODE_BLOCKS,SMARTYPANTS,HARDWRAPS,STRIKETHROUGH,TASKLISTITEMS,AUTOLINKS,ATXHEADERSPACE</pegdownExtensions>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.openjfx</groupId>
				<artifactId>javafx-maven-plugin</artifactId>
				<version>0.0.8</version>
				<executions>
					<execution>
						<id>default-cli</id>
						<configuration>
							<mainClass>${main-class}</mainClass>
							<options>
								<option>--add-opens=javafx.base/javafx.util=ALL-UNNAMED</option>
								<option>--add-opens=javafx.base/javafx.event=ALL-UNNAMED</option>
								<option>--add-opens=javafx.base/javafx.beans.property=ALL-UNNAMED</option>
								<option>--add-opens=javafx.base/com.sun.javafx.binding=ALL-UNNAMED</option>
								<option>--add-opens=javafx.base/com.sun.javafx.event=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/javafx.scene=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/javafx.stage=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/javafx.geometry=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/javafx.animation=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/javafx.scene.input=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/javafx.scene.image=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.prism=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.geom=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.image=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.stage=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.perf=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.cursor=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.tk=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.scene.traversal=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.geom.transform=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.scenario.animation=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.scenario.animation.shared=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.scenario.effect=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.sg.prism=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.application=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.prism.paint=ALL-UNNAMED</option>
								<option>--add-exports=javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED</option>
							</options>
							<commandlineArgs>${paintera.commandline.args}</commandlineArgs>
							<includePathExceptionsInClasspath>true</includePathExceptionsInClasspath>
						</configuration>
					</execution>
					<execution>
						<id>debug</id>
						<configuration>
							<mainClass>org.janelia.saalfeldlab.paintera.Paintera</mainClass>
							<options>
								<option>-Dglass.disableGrab=true</option>
								<option>-agentlib:jdwp=transport=dt_socket,server=n,address=localhost:5005,suspend=y</option>
								<option>--add-opens=javafx.base/javafx.util=ALL-UNNAMED</option>
								<option>--add-opens=javafx.base/javafx.event=ALL-UNNAMED</option>
								<option>--add-opens=javafx.base/javafx.beans.property=ALL-UNNAMED</option>
								<option>--add-opens=javafx.base/com.sun.javafx.binding=ALL-UNNAMED</option>
								<option>--add-opens=javafx.base/com.sun.javafx.event=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/javafx.scene=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/javafx.stage=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/javafx.geometry=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/javafx.animation=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/javafx.scene.input=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/javafx.scene.image=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.prism=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.geom=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.image=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.stage=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.perf=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.cursor=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.tk=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.scene.traversal=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.geom.transform=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.scenario.animation=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.scenario.animation.shared=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.scenario.effect=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.sg.prism=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.javafx.application=ALL-UNNAMED</option>
								<option>--add-opens=javafx.graphics/com.sun.prism.paint=ALL-UNNAMED</option>
								<option>--add-exports=javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED</option>
							</options>
							<commandlineArgs>${paintera.commandline.args}</commandlineArgs>
							<includePathExceptionsInClasspath>true</includePathExceptionsInClasspath>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.jetbrains.kotlin</groupId>
				<artifactId>kotlin-maven-plugin</artifactId>
				<version>${kotlin.version}</version>
				<configuration>
					<javacOptions>
					</javacOptions>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<profiles>
		<profile>
			<id>run-ui-tests</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<excludes combine.self="override" />
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
		<id>build-installer</id>
			<properties>
				<matrix.os>${os.name}</matrix.os>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>properties-maven-plugin</artifactId>
						<version>1.2.1</version>
						<executions>
							<execution>
								<phase>initialize</phase>
								<goals>
									<goal>read-project-properties</goal>
								</goals>
								<configuration>
									<files>
										<file>${basedir}/src/packaging/mvn-jpackage.properties</file>
									</files>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<!-- https://github.com/wiverson/jtoolprovider-plugin -->
						<groupId>io.github.wiverson</groupId>
						<artifactId>jtoolprovider-plugin</artifactId>
						<version>1.0.34</version>
						<executions>
							<!-- This command runs jlink, generating a custom JVM by combining the JavaFX modules bundled in
							this project with the JDK modules. -->
							<execution>
								<id>jlink</id>
								<phase>package</phase>
								<goals>
									<goal>java-tool</goal>
								</goals>
								<configuration>
									<toolName>jlink</toolName>
									<removeDirectories>${project.build.directory}/jvm-image/</removeDirectories>
									<addModules>${jvm.modules}</addModules>
									<output>${project.build.directory}/jvm-image</output>
									<args>
										<arg>--strip-native-commands</arg>
										<arg>--no-header-files</arg>
										<arg>--strip-debug</arg>
										<arg>--no-man-pages</arg>
										<arg>--compress=2</arg>
									</args>
								</configuration>
							</execution>
							<!-- The command that actually generates the installer. The options for each platform
							are found the /src/packaging directory. These files are copied into the target directory by
							the Maven resources plugin, which does the filtering to replace the original values with
							the actual Maven properties.
							https://github.com/wiverson/jtoolprovider-plugin/blob/main/java-tool-doc.md
							-->
							<execution>
								<id>jpackage</id>
								<phase>install</phase>
								<goals>
									<goal>java-tool</goal>
								</goals>
								<configuration>
									<!--suppress UnresolvedMavenProperty -->
									<mainJar>${project.build.finalName}.jar</mainJar>
									<toolName>jpackage</toolName>
									<dest>${project.build.directory}/installer-${matrix.os}</dest>
									<writeOutputToLog>true</writeOutputToLog>
									<writeErrorsToLog>true</writeErrorsToLog>
									<failOnError>true</failOnError>
									<removeDirectories>${project.build.directory}/installer-work</removeDirectories>
									<args>@${project.build.directory}/packaging/${os.detected.name}/jpackage.txt</args>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>skip-kapt</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.jetbrains.kotlin</groupId>
						<artifactId>kotlin-maven-plugin</artifactId>
						<version>${kotlin.version}</version>
						<executions>
							<execution>
								<id>compile</id>
								<phase>none</phase>
							</execution>
							<execution>
								<id>test-compile</id>
								<phase>none</phase>
							</execution>
							<execution>
								<id>kapt</id>
								<phase>none</phase>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>


		<!-- We use the built-in Maven profile activation system to set the platform property.
		These properties are then use to build the directory paths to the platform specific resources.
		It would be great if Maven automatically added the os family as a property by default
		 -->

		<profile>
			<id>macos-sign</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<macos.sign>--mac-sign</macos.sign>
				<!-- You will have to replace this with your own dev information from your Apple identity -->
				<macos.sign.identity>--mac-signing-key-user-name "Company Name, Inc. (BXPXTXC35S)"</macos.sign.identity>
			</properties>
		</profile>

		<profile>
			<id>windows-active</id>
			<activation>
				<os>
					<family>windows</family>
				</os>
			</activation>
			<build>
				<plugins>
					<plugin>
						<!-- This adds a "launch on finish" to the Windows msi installer. This just tweaks the Windows
						 installer package to run the executable after the installer runs, simplifying the user experience.
						  If you don't want this behavior, just delete this plug execution. -->
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<executions>
							<execution>
								<phase>install</phase>
								<id>add-launch-to-msi</id>
								<goals>
									<goal>exec</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<executable>cscript</executable>
							<outputFile>${project.build.directory}/msi-result.log</outputFile>
							<workingDirectory>${project.build.directory}</workingDirectory>
							<arguments>
								<argument>${project.build.directory}/packaging/add-launch-to-msi.js</argument>
							</arguments>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
